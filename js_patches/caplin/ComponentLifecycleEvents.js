/*
 *  Copyright 1995-2013 Caplin Systems Ltd. Do not edit this file; edits will be lost after upgrades.
 */

var caplin = caplin || {};
if (!caplin.component) caplin.component = {};

/**
 * @beta
 * @class
 * The <code>ComponentLifecycleEvents</code> interface is implemented by classes that
 * need to observe a particular component's life-cycle events. {@link caplin.component.Component}
 * instances themselves automatically implement this interface, since <code>Component</code>
 * extends <code>ComponentLifecycleEvents</code>.
 * 
 * <p>Component life cycle events are emitted by the object that hosts the components. This is
 * either the top-level {@link caplin.component.frame.FrameManager} for the application, or any
 * composite type component that itself contains other components. Overriding any of the methods
 * in this listener interface is optional, but doing so will enable you to react to the related
 * event.</p>
 * 
 * <p>The <code>FrameManager</code> determines whether the event methods are called immediately
 * before or immediately after the event they refer to.</p>
 * 
 * @constructor
 * @interface
 */
caplin.component.ComponentLifecycleEvents = function() 
{
};


/**
 * Invoked when the frame is first displayed. It will only ever be called once, which will always
 * be after the {@link caplin.component.Component#getElement} method has been called on the
 * <code>Component</code>.
 * 
 * <p><code>FrameManager</code> implementations must invoke this method after the element returned
 * by <code>Component.getElement()</code> has been added to the page. Initalization code that needs
 * to know the size of the component, or that uses the computed CSS styles that will only become
 * valid after the component's HTML has been added to the view should be placed here.</p>
 * 
 * @param {int} nWidth The width of the frame, in pixels.
 * @param {int} nHeight The height of the frame, in pixels.
 */
caplin.component.ComponentLifecycleEvents.prototype.onOpen = function(nWidth, nHeight)
{
	
};

/**
 * Invoked when the frame containing this component is closed.
 * 
 * <p>This method should be used to clean up any resources the component currently has open,
 * including subscriptions and any other listeners that may have been registered. Once
 * <code>onClose()</code> has been called no further methods will be called for this
 * component.</p>
 * 
 * <p>It is possible for the <code>onClose()</code> method to be invoked before
 * <code>onOpen()</code> if the component was instantiated but never displayed (for example if the
 * user was not permissioned to view the component) in which case this method should only be used
 * to clean up any resources it has opened within its constructor, and not those that it would
 * have opened within <code>onOpen()</code>.</p>
 */
caplin.component.ComponentLifecycleEvents.prototype.onClose = function()
{
	
};

/**
 * Invoked when a frame that has been hidden (see {@link #onHide}) is now back in view. It
 * should restore any resources that were stopped or suspended by <code>onHide()</code>.
 * 
 * <p>Note that this method is not called when the component within the frame is first
 * displayed (see {@link #onOpen}).</p>
 */
caplin.component.ComponentLifecycleEvents.prototype.onShow = function()
{
	
};

/**
 * Invoked when a frame is no longer in view. It should stop or suspend any resources that may
 * be processor intensive, such as subscriptions, so they are not active whilst the
 * frame is hidden.
 * 
 * @see #onShow
 */
caplin.component.ComponentLifecycleEvents.prototype.onHide = function()
{
	
};

/**
 * Invoked when the frame has been minimized.
 * 
 * @see #onRestore
 */
caplin.component.ComponentLifecycleEvents.prototype.onMinimize = function()
{
	
};

/**
 * Invoked when the frame has been maximized.
 * 
 * @see #onRestore
 */
caplin.component.ComponentLifecycleEvents.prototype.onMaximize = function()
{
	
};

/**
 * Invoked when the frame has been restored from a minimized or maximized state.
 * 
 * @see #onMinimize
 * @see #onMaximize
 */
caplin.component.ComponentLifecycleEvents.prototype.onRestore = function()
{
	
};

/**
 * Invoked when the dimensions of the frame change.
 * 
 * @param {int} nWidth The new width of the frame, in pixels.
 * @param {int} nHeight The new height of the frame, in pixels.
 */
caplin.component.ComponentLifecycleEvents.prototype.onResize = function(nWidth, nHeight)
{
	
};

/**
 * Invoked when the frame becomes the active or focused frame within the page.
 */
caplin.component.ComponentLifecycleEvents.prototype.onActivate = function()
{
	
};

/**
 * Invoked when the frame ceases to be the active or focused frame within the page.
 */
caplin.component.ComponentLifecycleEvents.prototype.onDeactivate = function()
{
	
};
