/*
 *  Copyright 1995-2013 Caplin Systems Ltd. Do not edit this file; edits will be lost after upgrades.
 */

/**
 * @beta
 * @class
 * Instances of <code>ComponentFrame</code> are used to wrap components before they are displayed on the
 * screen. These are created automatically when either {@link caplin.component.frame.FrameManager#addPanelToLayout}
 * or {@link caplin.component.frame.FrameManager#openDialog} are invoked, but may also be created by composite
 * components that embed other components within them.
 * 
 * @interface
 */
caplin.component.frame.ComponentFrame = function()
{
};

/**
 * Returns a reference to the top-level frame manager instance that can be used to display more frame items.
 * 
 * @type caplin.component.frame.FrameManager
 * @returns the frame manager for this component frame.
 */
caplin.component.frame.ComponentFrame.prototype.getFrameManager = function()
{
	throw new caplin.core.Error(caplin.core.Error.UNIMPLEMENTED_INTERFACE, "ComponentFrame.getFrameManager() has not been implemented.");
};

/**
 * Returns a reference to the component being wrapped by this frame.
 * @type caplin.component.Component
 */
caplin.component.frame.ComponentFrame.prototype.getComponent = function()
{
	throw new caplin.core.Error(caplin.core.Error.UNIMPLEMENTED_INTERFACE, "ComponentFrame.getComponent() has not been implemented.");
};

/**
 * Allows a component to indicate that it's has been modified, and requires persistence.
 * 
 * <p>Components that initially require persistence, but later no longer require it (e.g. due to the use of
 * the client undoing their previous actions) can indicate this by setting the <code>bIsModified</code>
 * parameter to <code>false</code>.</p>
 * 
 * @param {boolean} bIsModified Whether there has been a state change since the last invocation of
 * the component's {@link caplin.component.Component#getSerializedState} method.
 */
caplin.component.frame.ComponentFrame.prototype.setComponentModified = function(bIsModified)
{
	throw new caplin.core.Error(caplin.core.Error.UNIMPLEMENTED_INTERFACE, "ComponentFrame.setComponentModified() has not been implemented.");
};


/**
 * Set the title for the frame.
 * 
 * @param {String} sTitle The title to set for the component.
 */
caplin.component.frame.ComponentFrame.prototype.setTitle = function(sTitle)
{
 	throw new caplin.core.Error(caplin.core.Error.UNIMPLEMENTED_INTERFACE, "ComponentFrame.setTitle() has not been implemented.");
};

/**
 * Access the HTML element that contains the title bar for this frame.
 * @type DOMElement
 */
caplin.component.frame.ComponentFrame.prototype.getTitleBarElement = function()
{   
	throw new caplin.core.Error(caplin.core.Error.UNIMPLEMENTED_INTERFACE, "ComponentFrame.getTitleBarElement() has not been implemented.");
};

/**
 * Returns a container provided menu for this component.
 * 
 * <p>Components that need to expose a menu of commands to the user
 * may do so by using the container provided menu. Components that use decorators
 * to augment their behaviour may be sharing access to the menu with other
 * decorators that use this functionality.</p>
 * 
 * @type caplin.component.menu.Menu
 */
caplin.component.frame.ComponentFrame.prototype.getMenu = function()
{
	throw new caplin.core.Error(caplin.core.Error.UNIMPLEMENTED_INTERFACE, "ComponentFrame.getMenu() has not been implemented.");
};

/**
 * Adds additional menu items to the container menu. 
 * 
 * @param {caplin.component.menu.Menu} oMenu The additions to the menu.
 */
caplin.component.frame.ComponentFrame.prototype.addToMenu = function(oMenu)
{
	throw new caplin.core.Error(caplin.core.Error.UNIMPLEMENTED_INTERFACE, "ComponentFrame.addToMenu() has not been implemented.");
};

/**
 * Removes the component from view.
 */
caplin.component.frame.ComponentFrame.prototype.close = function()
{
	throw new caplin.core.Error(caplin.core.Error.UNIMPLEMENTED_INTERFACE, "ComponentFrame.close() has not been implemented.");
};
